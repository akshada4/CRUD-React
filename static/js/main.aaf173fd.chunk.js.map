{"version":3,"sources":["actions/types.js","components/LikeDislikeButton.js","actions/postActions.js","components/DisplayedPosts.js","components/Pagination.js","components/Search.js","components/HomepageHeader.js","components/Posts.js","components/CreatePost.js","App.js","reportWebVitals.js","reducers/postsReducer.js","reducers/likeDislikeReducer.js","reducers/index.js","store.js","index.js"],"names":["FETCH_POSTS","CREATE_POST","UPDATE_POST","LIKED_POST","DISLIKED_POST","connect","state","posts","likePost","post","dispatch","type","data","dislikePost","props","className","value","onClick","e","parseInt","target","DisplayedPosts","map","index","title","body","id","Pagination","totalPosts","limit","page","setPage","btns","maxIndex","middleButton","noOfButtonsDisplayed","Math","min","getButtonIndex","ceil","startIndex","endIndex","i","push","btn","Search","name","HomepageHeader","to","getPosts","fetch","then","response","json","useEffect","useState","numberOfPosts","length","slice","createPost","newPost","method","JSON","stringify","headers","setPost","submit","setSubmit","htmlFor","onChange","preventDefault","style","fontSize","color","App","path","exact","component","Posts","CreatePost","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","postsReducer","action","liked","disliked","likeDislikeReducer","combineReducers","likedDislikedPosts","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","allReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aaf173fd.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\nexport const CREATE_POST = 'CREATE_POST';\nexport const UPDATE_POST = 'UPDATE_POST';\nexport const LIKED_POST = 'LIKED_POST';\nexport const DISLIKED_POST = 'DISLIKED-POST';","import { likePost, dislikePost } from '../actions/postActions';\nimport { connect } from 'react-redux';\n\nconst LikeDislikeButton = (props) => {\n\tconst storeLikedPost = (e) => {\n\t\tconst post = props.posts.posts[parseInt(e.target.value)]; \n\t\tprops.likePost(post);\n\t}\n\n\tconst storeDislikedPost = (e) => {\n\t\tconst post = props.posts.posts[parseInt(e.target.value)];\n\t\tprops.dislikePost(post);\n\t}\n\n\treturn (<div className=\"post-btn\">\n\t\t\t\t<button value={props.value} onClick={storeLikedPost}>Like</button>\n\t\t\t\t<button value={props.value} onClick={storeDislikedPost}>Dislike</button>\n\t\t\t</div>)\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tposts: state.posts\n\t}\n}\n\nexport default connect(mapStateToProps, { likePost, dislikePost })(LikeDislikeButton);","import { FETCH_POSTS, CREATE_POST, UPDATE_POST, LIKED_POST, DISLIKED_POST } from './types';\n\nexport const getPosts = () => {\n\treturn (dispatch) => {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts')\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(posts => dispatch({\n\t\t\t\t\t\ttype: FETCH_POSTS,\n\t\t\t\t\t\tdata: posts\n\t\t\t\t\t}));\n\t}\n}\n\nexport const createPost = (newPost) => {\n\treturn (dispatch) => {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts', {\n  \t\t\tmethod: 'POST',\n  \t\t\tbody: JSON.stringify(newPost),\n  \t\t\theaders: {\n    \t\t\t'Content-type': 'application/json; charset=UTF-8',\n  \t\t\t},\n\t\t})\n  \t\t.then(response => response.json())\n  \t\t.then(post => dispatch({\n  \t\t\ttype: CREATE_POST,\n  \t\t\tdata: post \n  \t\t}));\n\t}\n}\n\nexport const updatePosts = (updatedPost) => {\n\treturn (dispatch) => {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts/1', {\n\t  \t\tmethod: 'PUT',\n\t \t\tbody: JSON.stringify(updatedPost),\n\t  \t\theaders: {\n\t    \t\t'Content-type': 'application/json; charset=UTF-8',\n\t  \t\t},\n\t\t})\n\t  \t.then((response) => response.json())\n\t  \t.then(post => dispatch({\n\t  \t\t\ttype: UPDATE_POST,\n\t  \t\t\tdata: post\n\t  \t\t}));\n\t}\n}\n\nexport const likePost = (post) => {\n\treturn (dispatch) => {\n\t\tdispatch({\n\t\t\ttype: LIKED_POST,\n\t\t\tdata: post })\n\t}\n}\n\nexport const dislikePost = (post) => {\n\treturn (dispatch) => {\n\t\tdispatch({\n\t\t\ttype: DISLIKED_POST,\n\t\t\tdata: post })\n\t}\n}","import LikeDislikeButton from './LikeDislikeButton'\n\nconst DisplayedPosts = ({ posts }) => {\n\treturn (\n\t\t<div>\n\t\t\t{posts.map((post,index) => (\n\t\t\t\t<div key={post.id} className=\"post\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h4>{post.title}</h4>\n\t\t\t\t\t\t<p>{post.body}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<LikeDislikeButton value={post.id} />\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default DisplayedPosts;","const getButtonIndex = (maxIndex, middleButton, limit) => {\n\tconst noOfButtonsDisplayed = Math.min(maxIndex,limit);\n\tif (middleButton === maxIndex-1 || middleButton === maxIndex)\n\t\treturn [maxIndex - noOfButtonsDisplayed + 1, maxIndex];\n\telse if (middleButton === 1 || middleButton === 2)\n\t\treturn [1, noOfButtonsDisplayed];\n\telse\n\t\treturn [middleButton - 2, middleButton + 2];\n}\n\nconst Pagination = ({ totalPosts, limit, page, setPage }) => {\n\tconst maxIndex = Math.ceil(totalPosts/limit);\n\tconst btns = [];\n\tconst [startIndex, endIndex] = getButtonIndex(maxIndex, page, limit);\n\tfor (let i = startIndex; i <= endIndex; i++) {\n\t\tbtns.push(i);\n\t}\n\n\treturn (<div className=\"pagination-buttons\">\n\t\t\t{ btns.map(btn => (\n\t\t\t\t<button className=\"pagination-btn\"\n\t\t\t\tkey={btn}\n\t\t\t\tonClick={e => setPage(parseInt(e.target.value))}\n\t\t\t\tvalue={btn}>{btn}</button>\n\t\t\t))};\n\t\t</div>\n\t\t)\n}\n\nexport default Pagination;","const Search = () => {\n\treturn (\n\t\t<div className=\"search\">\n\t\t\t<form>\n\t            <input type=\"search\" name=\"q\" id=\"search-input\" />\n\t            <button type=\"submit\" className=\"btn\" \n\t            \tid=\"search-post\">Search</button>\n\t        </form>\n         </div>\n        )\n}\n\nexport default Search;","import { Link } from 'react-router-dom';\nimport Search from './Search';\n\nconst HomepageHeader = () => {\n\n\treturn (\n\t\t<header>\n          <Search />     \n          <Link to=\"/CRUD-React/createpost\">    \n            <div className=\"header-buttons\" id=\"new-post-btn\">          \n                  <button className=\"btn\" \n                          id=\"add-post\">New Post</button>              \n            </div>\n          </Link>\n        </header>\n        )\n}\n\nexport default HomepageHeader;","import { getPosts } from '../actions/postActions';\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport DisplayedPosts from './DisplayedPosts';\nimport Pagination from './Pagination';\nimport HomepageHeader from './HomepageHeader'\n\n\nconst Posts = (props) => {\n\tuseEffect(() => {\n\t\tprops.getPosts()\n\t}, []);\n\n\tconst [page, setPage] = useState(1);\n\tconst limit = 5;\n\tconst posts = props.posts.posts;\n\tconst numberOfPosts = posts.length;\n\n\treturn (\n\t\t<div>\n\t\t\t<HomepageHeader />\n\t\t\t<DisplayedPosts posts={posts.slice(page-1 , (page-1) + limit)} />\n\t\t\t{numberOfPosts ? <Pagination totalPosts={numberOfPosts} \n\t\t\t\tlimit={limit} page={page} setPage={setPage}/> : ''}\n\t\t</div>\n\t\t)\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tposts: state.posts\n\t}\n}\n\nexport default connect(mapStateToProps, {getPosts})(Posts);\n","import { Link } from 'react-router-dom';\nimport { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postActions'\nimport Search from './Search'\n\nconst CreatePost = (props) => {\n\tconst [post, setPost] = useState({\n\t\ttitle: null,\n\t\tbody: null\n\t});\n\t\n\tconst [submit, setSubmit] = useState(false);\n\n\tconst submitPost = (e) => {\n\t\te.preventDefault();\n\t\tprops.createPost(post);\n\t\tsetSubmit(true)\n\t}\n\n\treturn (\n\t<div>\n\t\t<header>\n\t\t\t<Link to=\"/\">\n\t\t\t\t<button className=\"create-post-btn\" id=\"home\">Home</button>\t\n\t\t\t</Link>\n\t\t\t<Search />\n\t\t</header>\n\t\t<div className=\"create-post\">\n\t\t\t<form>\n\t\t\t\t<div>\n\t\t\t\t\t<label htmlFor=\"title\">Title</label>\n\t\t\t\t\t<textarea type=\"text\" name=\"title\" \n\t\t\t\t\tid=\"title\" onChange={e => setPost({...post, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle:e.target.value})}></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label htmlFor=\"body\">Content</label>\n\t\t\t\t\t<textarea type=\"text\" name=\"body\" \n\t\t\t\t\tid=\"body\" onChange={e => setPost({...post, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody:e.target.value})}></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button type=\"submit\" className=\"create-post-btn\" id=\"create-btn\" onClick={submitPost}>Create Post</button>\n\t\t\t\t</div>\n\t\t\t\t{submit ? <p style={{fontSize:\"2rem\",\n\t\t\t\t\t\t\t\t\tcolor:\"green\"}}>New Post Created</p> : ''}\n\t\t\t</form>\n\t\t</div>\n\t</div>\n\t)\n}\n\n\nexport default connect(null, {createPost})(CreatePost);","import Posts from './components/Posts';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CreatePost from './components/CreatePost'; \n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Route path=\"/CRUD-React/\" exact component={Posts} />\n        <Route path=\"/CRUD-React/createpost\" component={CreatePost} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FETCH_POSTS, CREATE_POST, UPDATE_POST } from '../actions/types'\n\nconst initialState = {\n\tposts: [],\n\tpost: {}\n};\n\nconst postsReducer = (state = initialState, action) => {\n\tswitch(action.type) {\n\t\tcase FETCH_POSTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: action.data\n\t\t\t}\n\t\tcase CREATE_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost: action.data\n\t\t\t}\n\t\tcase UPDATE_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost: action.data\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default postsReducer;","import {LIKED_POST, DISLIKED_POST} from '../actions/types';\n\nconst initialState = {\n\tliked: [],\n\tdisliked: []\n}\n\nconst likeDislikeReducer = (state = initialState, action) => {\n\tswitch(action.type){\n\t\tcase LIKED_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tliked: [...state.liked, action.data]\n\t\t\t};\n\t\tcase DISLIKED_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdisliked:  [...state.disliked, action.data]\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n\n}\n\nexport default likeDislikeReducer;","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport likeDislikeReducer from './likeDislikeReducer'\n\nexport default combineReducers({\n\tposts : postsReducer,\n\tlikedDislikedPosts: likeDislikeReducer,\n})\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport allReducers from './reducers'\n\n// const store = createStore(allReducers, applyMiddleware(thunk),  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(allReducers, /* preloadedState, */ composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}